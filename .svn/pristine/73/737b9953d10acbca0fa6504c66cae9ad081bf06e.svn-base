package com.br.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.br.dto.ReviewDto;
import com.br.utils.ConnectionUtil;
import com.br.utils.JdbcHelper;
import com.br.utils.JdbcHelper.RowMapper;
import com.br.utils.QueryUtil;
import com.br.vo.Product;

public class SearchDao {
	ArrayList<Product> products;
	
	public ArrayList<Product> getAllProducts(String searchValue) throws SQLException {
		ArrayList<Product> products = new ArrayList<Product>();
		Connection connection = ConnectionUtil.getConnection();
		PreparedStatement pstmt = connection.prepareStatement(QueryUtil.getSQL("search.getAllProducts"));
		pstmt.setString(1, searchValue);
		ResultSet rs = pstmt.executeQuery();

		while (rs.next()) {
			Product product = new Product();
			String name = rs.getString("name");
			int price = rs.getInt("price");
			int point = rs.getInt("point");
			int discountPrice = rs.getInt("discount_price");
			String imagePath = rs.getString("image_path");
			String explain = rs.getString("explain");
			String category = rs.getString("category");
			product.setName(name);
			product.setPrice(price);
			product.setPoint(point);
			product.setDiscountPrice(discountPrice);
			product.setExplain(explain);
			product.setImagePath(imagePath);
			product.setCategory(category);
			product.setTags(getProductTagByProductNo(rs.getInt("product_no")));
			products.add(product);
		}

		ConnectionUtil.close(connection, pstmt, rs);

		return products;
	}
	
	public List<Product> getProductsByCategory(String category, String searchValue) throws SQLException {
		Connection connection = ConnectionUtil.getConnection();
		PreparedStatement pstmt = connection.prepareStatement(QueryUtil.getSQL("search.getProductsByCategoryWithSearch"));
		pstmt.setString(1, category);
		pstmt.setString(2, searchValue);
		ResultSet rs = pstmt.executeQuery();
		products = new ArrayList<Product>();
		while (rs.next()) {
			Product product = new Product();
			int no = rs.getInt("product_no");
			String name = rs.getString("name");
			int price = rs.getInt("price");
			int point = rs.getInt("point");
			int discountPrice = rs.getInt("discount_price");
			String imagePath = rs.getString("image_path");
			String explain = rs.getString("explain");
			product.setNo(no);
			product.setName(name);
			product.setPrice(price);
			product.setPoint(point);
			product.setDiscountPrice(discountPrice);
			product.setExplain(explain);
			product.setImagePath(imagePath);
			product.setCategory(category);
			product.setTags(getProductTagByProductNo(rs.getInt("product_no")));
			products.add(product);
		}
		ConnectionUtil.close(connection, pstmt, rs);
		return products;
	}
	
	public ArrayList<String> getProductTagByProductNo(int productNo) throws SQLException {
		Connection connection = ConnectionUtil.getConnection();
		PreparedStatement pstmt = connection.prepareStatement(QueryUtil.getSQL("product.getProductTagByProductNo"));
		pstmt.setInt(1, productNo);
		ResultSet rs = pstmt.executeQuery();
		ArrayList<String> tags = new ArrayList<String>();
		while (rs.next()) {
			tags.add(rs.getString("product_tag"));
		}
		ConnectionUtil.close(connection, pstmt, rs);
		return tags;
	}
	
	public List<ReviewDto> getBestReviewByliked() {
		String query = QueryUtil.getSQL("search.getBestReviewByliked");
		
		return JdbcHelper.selectList(query, new RowMapper<ReviewDto>() {
			public ReviewDto mapRow(ResultSet rs) throws SQLException {
				ReviewDto review = new ReviewDto();
				review.setNo(rs.getInt("review_no"));
				review.setImagePath(rs.getString("image_path"));
				review.setDeleted(rs.getString("deleted"));
				return review;
			}
		});
		
		
	}
	
	
}
